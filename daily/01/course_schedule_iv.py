# 27/1/25
# https://leetcode.com/problems/course-schedule-iv/description/

from collections import defaultdict


def checkIfPrerequisite(numCourses: int, prereqs: list[list[int]], queries: list[list[int]]) -> list[bool]:
    # Adjacency list representation of a graph.
    g = [[] for _ in range(numCourses)]
    in_degree = [0 for _ in range(numCourses)]

    # Creates the graph structure - O(P)
    for first, second in prereqs:
        g[first].append(second)
        in_degree[second] += 1

    # A dictionary, mapping the course to a list of (component #, component idx.)
    course_info = defaultdict(set)

    def DFS(v: int) -> set[int]:
        visited[v] = True

        prereqs = set()
        for neighbour in g[v]:
            if visited[neighbour]:
                continue

            # Form a set of all pre-reqs from all the neighbours pre-reqs
            prereqs |= DFS(neighbour)

        # Add the culmulative list to prev. prereqs      
        course_info[v] |= prereqs

        prereqs.add(v)

        trav.append(v)

        # Returns only the pre-reqs in this 'chain'.
        return prereqs

    trav = []

    # Adaptation of a Topological Sort - O(n)
    for (course, _) in sorted(enumerate(in_degree), key=lambda x: x[1]):
        if in_degree[course] == 0:
            visited = [False for _ in range(numCourses)]
            DFS(course)

    # For all outdegrees of a course, ensures that the prereqs are a union of itself & all its neighbours.
    # A necessary correction, as certain cells are marked as visited to reduce duplicate computations, but require
    # futher traversal. - O(n * d(n) * (d(n) + d(n)))
    for i in trav:
        for neighbour in g[i]:
            course_info[i].add(neighbour)
            course_info[i] |= course_info[neighbour]

    # Handle queries - O(Q)
    query_ans = [False for _ in range(len(queries))]
    for (i, (q1, q2)) in enumerate(queries):
        if q2 in course_info[q1]:
            query_ans[i] = True

    return query_ans

# print(checkIfPrerequisite(14, [[6,5],[6,4],[6,2],[6,11],[6,1],[6,7],[6,9],[6,8],[6,10],[6,12],[5,13],[5,2],[5,3],[5,11],[5,1],[5,8],[5,12],[0,4],[0,13],[0,2],[0,3],[0,11],[0,1],[0,7],[0,9],[0,10],[0,12],[4,13],[4,2],[4,3],[4,7],[4,9],[4,8],[4,10],[4,12],[13,2],[13,11],[13,1],[13,7],[13,9],[13,8],[13,10],[13,12],[3,7],[3,8],[3,12],[11,12],[1,9],[1,10],[7,9],[7,10],[9,10],[8,10],[10,12]], [[12,13],[11,3],[11,10],[8,3],[10,13],[11,12],[3,12],[12,8],[8,5],[6,8],[0,6],[3,5],[12,11],[0,13],[12,9],[1,7],[1,4],[8,11],[11,12],[12,10],[11,12],[9,10],[12,10],[12,10],[13,9],[13,12],[12,13],[6,9],[10,6],[8,13],[7,11],[1,11],[12,2],[6,9],[9,8],[7,13],[12,10],[6,13],[9,12],[12,13],[12,13],[4,7],[7,11],[9,8],[6,0],[13,12],[8,2],[4,13],[10,7],[12,6],[2,12],[7,0],[4,12],[8,1],[10,6],[6,9],[12,11],[12,10],[8,0],[12,9],[9,10],[7,11],[3,12],[11,12],[11,4],[10,12],[5,0],[6,4],[2,6],[12,11],[2,7],[0,5],[8,1],[9,12],[11,1],[3,8]]))
# print(checkIfPrerequisite(13, [[2,1],[2,7],[2,0],[2,10],[2,11],[1,7],[1,0],[1,9],[1,4],[1,11],[7,3],[7,9],[7,4],[7,11],[7,8],[3,6],[3,12],[3,5],[6,10],[6,8],[0,4],[12,9],[12,8],[9,4],[9,11],[9,8],[9,5],[10,8],[4,8]], [[12,11],[11,1],[10,12],[9,10],[10,11],[11,12],[2,7],[6,8],[3,2],[9,5],[8,7],[1,4],[3,12],[9,6],[4,3],[11,4],[5,7],[3,9],[3,1],[8,12],[5,12],[0,8],[10,5],[10,11],[12,11],[12,9],[5,4],[11,5],[12,10],[11,0],[6,10],[11,7],[8,10],[2,1],[3,4],[8,7],[11,6],[9,11],[1,4],[10,8],[7,1],[8,7],[9,7],[5,1],[8,10],[11,8],[8,12],[9,12],[12,11],[6,12],[12,11],[6,10],[9,12],[8,10],[8,11],[8,5],[7,9],[12,11],[11,12],[8,0],[12,11],[7,0],[8,7],[5,11],[11,8],[1,9],[4,10],[11,6],[10,12]]))
# print(checkIfPrerequisite(11, [[6,3],[6,8],[6,5],[6,10],[6,0],[6,7],[6,4],[6,9],[6,1],[3,8],[3,10],[3,0],[3,7],[3,4],[3,2],[3,9],[3,1],[8,5],[8,10],[8,4],[8,2],[8,9],[5,10],[5,7],[5,4],[5,9],[5,1],[10,0],[10,7],[10,4],[10,2],[10,9],[0,7],[0,4],[0,2],[7,2],[7,9],[7,1],[4,2],[4,9],[4,1],[2,9],[2,1]], [[2,1],[8,9],[6,7],[3,8],[4,10],[9,6],[4,2],[5,10],[3,5],[5,9],[10,7],[7,6],[7,10],[0,5],[2,8],[6,2],[9,7],[9,4],[5,0],[9,5],[0,9],[6,10],[8,9],[5,8],[8,9],[4,5],[1,10],[6,5],[5,9],[0,9],[2,6],[4,5],[9,1],[8,1],[9,10],[4,6],[6,4],[5,9],[7,1],[10,1],[9,6],[1,3],[2,0],[9,10],[5,9],[7,5],[9,6],[1,4],[3,1],[10,4],[5,6],[1,4],[4,3],[9,5],[4,5],[5,8],[5,6],[9,10],[9,10],[7,8],[5,6],[4,6],[3,5],[7,10],[8,10],[7,8],[0,4],[7,0],[8,3],[8,10],[2,4],[6,10],[0,1],[10,6],[7,2],[4,3],[2,3],[3,1],[1,4],[5,7],[4,10],[7,2],[6,8],[0,8],[4,3],[8,7],[0,3],[10,9],[5,7],[6,8],[8,5],[3,5],[9,5],[7,9],[7,9],[3,4],[7,6],[3,9],[2,0],[10,6],[7,6],[10,6],[4,3],[9,10],[3,7],[7,10],[6,1]]))
# print(checkIfPrerequisite(10, [[0,6],[0,7],[0,3],[0,2],[0,5],[0,8],[0,1],[4,6],[4,7],[4,3],[4,9],[4,8],[4,1],[6,7],[6,9],[6,5],[6,8],[6,1],[7,3],[7,9],[7,5],[7,8],[3,9],[3,5],[3,8],[3,1],[2,8],[2,1],[9,5],[9,8],[9,1],[5,1],[8,1]], [[4,2],[8,9],[0,6],[7,2],[8,3],[8,6],[9,7],[5,2],[9,8],[8,4],[0,6],[7,9],[0,3],[9,6],[8,9],[7,8],[4,1],[8,5],[1,2],[9,7],[7,6]]))
# print(checkIfPrerequisite(7, [[2,3],[2,1],[2,0],[3,4],[3,6],[5,1],[5,0],[1,4],[1,0],[4,0],[0,6]], [[3,0],[6,4],[5,6],[2,6],[2,3],[5,6],[4,0],[2,6],[3,5],[5,3],[1,6],[1,0],[3,5],[6,5],[2,3],[3,0],[3,4],[3,4],[2,5],[0,3],[4,0],[6,4],[5,0],[6,5],[5,6],[6,5],[1,0],[3,4],[1,5],[1,4],[3,6],[0,1],[1,2],[5,1],[5,3],[5,3],[3,4],[5,4],[5,4],[5,3]]))

# print(checkIfPrerequisite(2, [[1, 0]], [[0, 1], [1, 0]]))
# print(checkIfPrerequisite(2, [], [[1, 0], [0, 1]]))
# print(checkIfPrerequisite(3, [[1, 2], [1, 0], [2, 0]], [[1, 0], [1, 2]]))